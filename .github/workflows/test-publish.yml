# This workflow will test the build and upload of mml-core and plugins to TestPyPI when a tag containing "rc" is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Test Packaging

on:
  push:
    tags:
      - '*rc*'

permissions:
  contents: read

jobs:
  test-build-core:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Build release distributions
        run: |
          pip install -U build
          python -m build
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  test-build-plugins:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install build dependencies
        run: |
          pip install -U build
          python -m build
      - name: Iterate over plugins and build distributions
        run: |
          cd plugins
          while IFS='' read -r LINE || [ -n "${LINE}" ]; do
            echo "Building plugin: ${LINE}"
            cd ${LINE}
            python -m build
            echo "Done building plugin ${LINE}"
            cp -a dist/. ../dist/
            cd ..
          done < index.txt
          echo "Built all plugins from plugins/index.txt"
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: plugins-dists
          path: plugins/dist/

  test-pypi-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - test-build-core
      - test-build-plugins
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: test-pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Retrieve plugin distributions
        uses: actions/download-artifact@v4
        with:
          name: plugins-dists
          path: dist/

      - name: Publish distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/
        
